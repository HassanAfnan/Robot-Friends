{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBar.js","containers/App1.js","serviceWorker.js","index.js"],"names":["Card","email","name","id","className","alt","src","CardList","roborts","map","user","i","key","Scroll","props","style","overflow","border","height","children","SearchBar","searchfield","searchChange","type","placeholder","onChange","App1","onSearchChange","event","setState","target","value","state","robots","fetch","then","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","lenght","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAE5B,OACS,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,cACvB,6BACC,4BAAKD,GACL,2BAAID,MCYDM,EAlBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,6BAEQA,EAAQC,KAAI,SAACC,EAAKC,GAChB,OACD,kBAAC,EAAD,CACGC,IAAKD,EACLR,GAAIK,EAAQG,GAAGR,GACfD,KAAMM,EAAQG,GAAGT,KACjBD,MAAOO,EAAQG,GAAGV,aCJnBY,EAPA,SAACC,GACf,OACM,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAoBC,OAAQ,UAChEJ,EAAMK,WCSHC,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKlB,UAAU,OACf,2BACCmB,KAAK,SACLC,YAAY,gBACZpB,UAAU,mCACVqB,SAAUH,MCqCEI,G,wDAtCd,aAAc,IAAD,8BACR,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACbC,OAAO,GACVZ,YAAa,IAJF,E,gEASZ,IAAD,OACCa,MAAM,8CACAC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACI,OAAQK,S,+BAOjC,IAAD,OACDC,EAAeC,KAAKR,MAAMC,OAAOQ,QAAO,SAAAC,GAC5C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKZ,MAAMX,YAAYsB,kBAElE,OAAgC,IAA7BH,KAAKR,MAAMC,OAAOY,OACb,4CAGF,yBAAKzC,UAAU,MACb,6CACA,kBAAC,EAAD,CAAWkB,aAAgBkB,KAAKb,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,QAAW+B,U,GAjChBO,cCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACM,kBAAC,EAAD,OAENC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.94d43a37.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ email, name, id }) => {\n\t//const { email, name, id } = props;\n\treturn(\n          <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='roborts' src={`https://robohash.org/${id}?200X200`}/>\n          \t<div>\n          \t\t<h2>{name}</h2>\n          \t\t<p>{email}</p>\n          \t</div>\n          </div>\n\t\t);\n\t}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({roborts}) => {\nreturn(\n    <div>\n       {\n            roborts.map((user,i) => {\t\n              return(\n      \t      <Card \n                key={i} \n                id={roborts[i].id} \n                name={roborts[i].name} \n                email={roborts[i].email}\n              />\n            );        \n        })\n    }\n    </div>  \n);\n}\nexport default CardList;  ","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n       <div style={{overflow: 'scroll', border: '5px solid black' , height: '800px'}}>\n           {props.children}\n       </div>\n\t);\n}\nexport default Scroll; ","import React from 'react';\n\nconst SearchBar = ({searchfield,searchChange}) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t<input \n\t\t type='search' \n\t\t placeholder='Search Robots' \n\t\t className='pa3 ba b--green bg-lightest-blue'\n\t\t onChange={searchChange}\n\t\t />\n\t\t </div>\n\t);\n}\nexport default SearchBar;","import React , { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBar from '../components/SearchBar';\nimport './App.css';\n\nclass App1 extends Component {\n\t\n\tconstructor(){\n      super();\n      this.state = {\n      robots:[],\n\t  searchfield: ''\n\t  }\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t     .then(response => response.json())\n\t\t     .then(users => {this.setState({robots: users})});\n\t}\n\n    onSearchChange = (event) => {\n      this.setState({searchfield: event.target.value});\t\n    }\n\n    render(){\n    \tconst filterRobots = this.state.robots.filter(robot =>{\n      \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n      })\n    \tif(this.state.robots.lenght === 0){\n    \t\treturn <h1>Loading ....</h1>\n    \t}else{\n        return(\n  \t        <div className='tc'>\n  \t          <h1>Robot Friends</h1>\n  \t          <SearchBar searchChange = {this.onSearchChange}/>\n  \t          <Scroll>\n              <CardList roborts = {filterRobots}/>\n              </Scroll>\n            </div>\n            );\n        }\n    }\n}\nexport default App1;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App1 from './containers/App1';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n        <App1/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}